global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal

snippet template "Basic template" b
\documentclass[11pt,reqno]{amsart}
\usepackage{microtype}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc} 
\usepackage[english]{babel}
\usepackage{fullpage} 
\usepackage{amsmath, amsthm, amssymb}
\usepackage{enumerate}
\usepackage{todonotes, comment}
\usepackage[dvipsnames]{xcolor}
\usepackage[
	colorlinks=true,
	hyperindex,
	linkcolor=black,
	pdfpagelabels
]{hyperref}

\renewcommand\qedsymbol{$\blacksquare$}

\title{$1}
\author{Luiz G. Mugnaini A.}
\date{$2}

\begin{document}
\maketitle

$0
	
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet thm "theorem" b
\\begin{theorem}\label{thm: $1}
	$0
\\end{theorem}
endsnippet

snippet prop "proposition" b
\\begin{proposition}\label{prop: $1}
	$0
\\end{proposition}
endsnippet

snippet def "definition" b
\\begin{definition}\label{def: $1}
	$0
\\end{definition}
endsnippet

snippet proof "begin{} / end{}" b
\\begin{proof}
	$0
\\end{proof}
endsnippet

snippet cor "corollary" b
\\begin{corollary}\label{cor: $1}
	$0
\\end{corollary}
endsnippet

snippet lem "lemma" b
\\begin{lemma}\label{lem: $1}
	$0
\\end{lemma}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\setlength\itemsep{0.0em}
	\item $0
\end{itemize}
endsnippet

snippet => "implies" Ai
\Rightarrow
endsnippet

snippet =< "implied by" Ai
\Leftarrow
endsnippet

context "math()"
snippet iff "iff" wA
\Leftrightarrow
endsnippet

snippet mk "Math" wA
\(${1}\)`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	#snip.rv = ' '
	snip.rv = ''
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" bA
\[
	${1:${VISUAL}}
\] 
endsnippet

snippet eq "Align" b
\begin{equation}\label{eq: $1}
	${2:${VISUAL}}
\end{equation}
endsnippet

snippet ali "Align" b
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet

snippet gath "gather" b
\begin{gather*}
	${1:${VISUAL}}
\end{gather*}
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil$0
endsnippet

context "math()"
snippet floor "floor" iA 
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} 
	$1
\end{bmatrix}
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right)$0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right|$0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\}$0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right]$0
endsnippet

snippet dd "d/dx" w
\frac{\mathrm{d} ${1:f}}{\mathrm{d} ${2:x}}$0
endsnippet

snippet part "del/delx" w
\frac{\partial ${1:f}}{\partial ${2:x}}$0
endsnippet

context "math()"
snippet sq "\sqrt{}" i
\sqrt{${1:${VISUAL}}}
endsnippet

context "math()"
snippet >= "geq" iA
\geq
endsnippet

context "math()"
snippet <= "leq" iA
\leq
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\}
endsnippet

context "math()"
snippet cc "subset" iA
\subseteq
endsnippet

context "math()"
snippet notin "not in " iA
\not\in
endsnippet

context "math()"
snippet inn "in " iA
\in
endsnippet

snippet uuu "bigcup" iA
\bigcup_{$1} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet cases "cases" bA
\begin{cases}
	$1
\end{cases}
endsnippet

context "math()"
snippet eps "epsilon" i
\varepsilon
endsnippet

context "math()"
snippet OO "infinity" iA
\infty
endsnippet

context "math()"
snippet RR "reals" iA
\R
endsnippet

context "math()"
snippet QQ "rationals" iA
\Q
endsnippet

context "math()"
snippet ZZ "integers" iA
\Z
endsnippet

context "math()"
snippet NN "naturals" iA
\N
endsnippet

context "math()"
snippet diag "tikzcd" wA
\begin{tikzcd}
	$0
\end{tikzcd}
endsnippet

context "math()"
snippet -> "to" iA
\to
endsnippet

# vim:ft=snippets
